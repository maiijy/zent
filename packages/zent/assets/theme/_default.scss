@import './variables/color';
@import './variables/text';
@import './old-default';

$null: 'NULL';

// sass-lint:disable no-duplicate-properties

@function get-value($map, $key) {
  $val: map-get($map, $key);

  @if $val {
    @return $val;
  } @else {
    @error '#{$key} doesnot exist';
  }
}

@function get-color-value($type, $key: $null) {
  @if $key == $null {
    @return map-get($global-colors, $type);
  } @else {
    @return get-value(get-value($colors-map, $type), $key);
  }
}

@function zent-color-var-rgb($type, $desc: $null) {
  $color: get-color-value($type, $desc);

  $desc-var: $desc;

  @if $desc == $null {
    $desc-var: 'color';
  }

  @return var(--#{$type}-#{$desc-var}, $color);
}

@function zent-color-var-rgba($type, $desc: $null, $opacity: 1) {
  $color: get-color-value($type, $desc);

  $desc-var: $desc;

  @if $desc == $null {
    $desc-var: 'color';
  }

  $css-var: var(--rgb-#{$type}-#{$desc-var} to-rgb($color));

  // `unquote` is a workaround for node-sass misinterprets rgba as builtin function
  // https://github.com/sass/node-sass/issues/2251
  // dart-sass doesn't seem to have this issue.
  @return unquote('rgba(#{$css-var}, #{$opacity})');
}

@mixin zent-color($prop, $type, $desc: $null, $opacity: 1) {
  $color: get-color-value($type, $desc);

  @if $opacity >= 1 {
    #{$prop}: $color;
    #{$prop}: zent-color-var-rgb($type, $desc);
  } @else {
    #{$prop}: rgba($color, $opacity);
    #{$prop}: zent-color-var-rgba($type, $desc);
  }
}

@function zent-size-var($map, $type, $desc) {
  $size: get-value($map, $desc);

  @return var(--#{$type}-#{$desc}, $size);
}

@function zent-font-size-var($desc) {
  $size: get-value($font-size, $desc);

  @return var(--font-size-#{$desc}, $size);
}

@mixin zent-font($desc) {
  $font-size: get-value($font-size, $desc);
  $font-size-var: zent-font-size-var($desc);

  @if $font-size > $break-size {
    font-size: $font-size-var;
    line-height: zent-size-var($line-height, 'line-height', $text) * $font-size;
  } @else {
    font-size: $font-size-var;
    line-height: zent-size-var($line-height, 'line-height', $heading) *
      $font-size;
  }
}

@function zent-spacing-value($desc) {
  @return zent-size-var($spacing, 'spacing', $desc);
}

@mixin zent-spacing($desc) {
  #{$prop}: zent-spacing-value($desc);
}

@mixin zent-radius($desc) {
  border-radius: zent-size-var($border-radius, 'border-radius', $desc);
}

@mixin zent-border-width($desc: 1, $prop: 'border-width') {
  #{$prop}: zent-size-var($border-width, 'border-width', $desc);
}

@mixin zent-border-impl(
  $prop,
  $color-type,
  $color-desc,
  $width-desc,
  $style,
  $opacity
) {
  @include zent-color(#{$prop}-color, $color-type, $color-desc, $opacity: 1);
  @include zent-border-width($width-desc, #{$prop}-width);

  border-style: $style;
}

@mixin zent-border($color-type, $color-desc, $width-desc, $style, $opacity: 1) {
  @include zent-border-impl(
    border,
    $color-type,
    $color-desc,
    $width-desc,
    $style,
    $opacity
  );
}

@mixin zent-border-top(
  $color-type,
  $color-desc,
  $width-desc,
  $style,
  $opacity: 1
) {
  @include zent-border-impl(
    border-top,
    $color-type,
    $color-desc,
    $width-desc,
    $style,
    $opacity
  );
}

@mixin zent-border-right(
  $color-type,
  $color-desc,
  $width-desc,
  $style,
  $opacity: 1
) {
  @include zent-border-impl(
    border-right,
    $color-type,
    $color-desc,
    $width-desc,
    $style,
    $opacity
  );
}

@mixin zent-border-bottom(
  $color-type,
  $color-desc,
  $width-desc,
  $style,
  $opacity: 1
) {
  @include zent-border-impl(
    border-bottom,
    $color-type,
    $color-desc,
    $width-desc,
    $style,
    $opacity
  );
}

@mixin zent-border-left(
  $color-type,
  $color-desc,
  $width-desc,
  $style,
  $opacity: 1
) {
  @include zent-border-impl(
    border-left,
    $color-type,
    $color-desc,
    $width-desc,
    $style,
    $opacity
  );
}

// Shadow
$shadow-spec-focus-var: $shadow-size-focus zent-color-var-rgba(box-shadow) !default;
$shadow-spec-layer-var: $shadow-size-layer zent-color-var-rgba(box-shadow) !default;
$shadow-spec-modal-var: $shadow-size-modal zent-color-var-rgba(box-shadow) !default;

$theme-shadow: (
  $focus: $shadow-spec-focus,
  $layer: $shadow-spec-layer,
  $modal: $shadow-spec-modal,
);

$theme-shadow-var: (
  $focus: $shadow-spec-focus-var,
  $layer: $shadow-spec-layer-var,
  $modal: $shadow-spec-modal-var,
);

@mixin theme-shadow($name) {
  $shadow: map-get($theme-shadow, $name);
  $shadow-var: map-get($theme-shadow-var, $name);

  box-shadow: $shadow;
  box-shadow: var(--shadow-spec-#{$name}, $shadow-var);
}

@mixin zent-shadow($name) {
  @include theme-shadow($name);
}
