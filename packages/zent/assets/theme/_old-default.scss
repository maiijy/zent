@import './variables/color';
@import './variables/box';

// sass-lint:disable no-duplicate-properties
// !!! DO NOT USE !!!
// These variables will be removed
$notify-error: rgba(255, 68, 68, 0.8);
$notify-success: rgba(68, 187, 136, 0.8);

$name-mapping: (
  'stroke-1': 'text-info',
  'stroke-2': 'text-info',
  'stroke-3': 'text-weak',
  'stroke-4': 'text-disabled',
  'stroke-5': 'border-info',
  'stroke-6': 'border-info',
  'stroke-7': 'background-info',
  'stroke-8': 'background-info',
  'stroke-9': 'background-info',
  'stroke-10': 'background-alt-behavior-active',
  'primary-1': 'background-behavior-active',
  'primary-2': 'background-behavior-active',
  'primary-3': 'background-behavior-active',
  'primary-4': 'background-behavior-default',
  'primary-5': 'background-behavior-hover',
  'primary-6': 'background-behavior-hover',
  'primary-7': 'background-behavior-hover',
  'primary-8': 'background-behavior-hover',
  'success-1': 'text-success',
  'success-2': 'text-success',
  'success-3': 'background-success',
  'success-4': 'text-success',
  'success-5': 'background-success',
  'error-1': 'text-error',
  'error-2': 'text-error',
  'error-3': 'background-error',
  'error-4': 'text-error',
  'error-5': 'background-error',
  'warn-1': 'text-warn',
  'warn-2': 'text-warn',
  'warn-3': 'background-warn',
  'warn-4': 'text-warn',
  'warn-5': 'background-warn',
);

@function get-color($cat, $i) {
  @return nth(map-get($theme-colors, $cat), $i);
}

@function to-rgb($color) {
  @return red($color), green($color), blue($color);
}

// Use this for color with opacity = 1
// This is for backword compatibily
@function get-css-var($cat, $i) {
  // sass-lint:disable-block space-around-operator
  @return --brand-#{map-get($name-mapping, #{$cat}-#{$i})};
}

// Use this for rgba support in theme colors
@function get-rgb-css-var($cat, $i) {
  // sass-lint:disable-block space-around-operator
  @return --brand-rgb-#{map-get($name-mapping, #{$cat}-#{$i})};
}

@function theme-rgb($cat, $i) {
  @return var(get-css-var($cat, $i), get-color($cat, $i));
}

@function theme-rgba($cat, $i, $opacity) {
  $css-var: var(get-rgb-css-var($cat, $i), to-rgb(get-color($cat, $i)));

  // `unquote` is a workaround for node-sass misinterprets rgba as builtin function
  // https://github.com/sass/node-sass/issues/2251
  // dart-sass doesn't seem to have this issue.
  @return unquote('rgba(#{$css-var}, #{$opacity})');
}

@mixin theme-color($prop, $cat, $i, $opacity: 1) {
  $color: get-color($cat, $i);

  @if $opacity >= 1 {
    #{$prop}: $color;
    #{$prop}: theme-rgb($cat, $i);
  } @else {
    #{$prop}: rgba($color, $opacity);
    #{$prop}: theme-rgba($cat, $i, $opacity);
  }
}

@mixin theme-border-impl($prop, $width, $style, $cat, $i, $opacity) {
  $color: get-color($cat, $i);

  @if $opacity >= 1 {
    #{$prop}: $width $style $color;
    #{$prop}: $width $style theme-rgb($cat, $i);
  } @else {
    #{$prop}: $width $style rgba($color, $opacity);
    #{$prop}: $width $style theme-rgba($cat, $i, $opacity);
  }
}

@mixin theme-border($width, $style, $cat, $i, $opacity: 1) {
  @include theme-border-impl(border, $width, $style, $cat, $i, $opacity);
}

@mixin theme-border-top($width, $style, $cat, $i, $opacity: 1) {
  @include theme-border-impl(border-top, $width, $style, $cat, $i, $opacity);
}

@mixin theme-border-right($width, $style, $cat, $i, $opacity: 1) {
  @include theme-border-impl(border-right, $width, $style, $cat, $i, $opacity);
}

@mixin theme-border-bottom($width, $style, $cat, $i, $opacity: 1) {
  @include theme-border-impl(border-bottom, $width, $style, $cat, $i, $opacity);
}

@mixin theme-border-left($width, $style, $cat, $i, $opacity: 1) {
  @include theme-border-impl(border-left, $width, $style, $cat, $i, $opacity);
}

// Shadow
$shadow-spec-focus-var: $shadow-size-focus theme-rgba(primary, 1, 0.2) !default;
$shadow-spec-layer-var: $shadow-size-layer theme-rgba(stroke, 4, 0.5) !default;
$shadow-spec-modal-var: $shadow-size-modal theme-rgba(stroke, 4, 0.5) !default;

$theme-shadow: (
  $focus: $shadow-spec-focus,
  $layer: $shadow-spec-layer,
  $modal: $shadow-spec-modal,
);

$theme-shadow-var: (
  $focus: $shadow-spec-focus-var,
  $layer: $shadow-spec-layer-var,
  $modal: $shadow-spec-modal-var,
);

@mixin theme-shadow($name) {
  $shadow: map-get($theme-shadow, $name);
  $shadow-var: map-get($theme-shadow-var, $name);

  box-shadow: $shadow;
  box-shadow: var(--shadow-spec-#{$name}, $shadow-var);
}

// @mixin default-theme-variables {
//   @each $cat, $list in $theme-colors {
//     @for $i from 1 through length($list) {
//       #{--theme-#{$cat}-#{$i}}: nth($list, $i);
//     }
//   }
// }
