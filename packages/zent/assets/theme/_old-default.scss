@import './variables/color';
@import './variables/box';

// sass-lint:disable no-duplicate-properties
// !!! DO NOT USE !!!
// These variables will be removed
$notify-error: rgba(255, 68, 68, 0.8);
$notify-success: rgba(68, 187, 136, 0.8);
$rate-star-color: map-get($rate-colors, 'bg');

$name-mapping: (
  'stroke-1': 'title-color',
  'stroke-2': 'hint-color',
  'stroke-3': 'hint-color',
  'stroke-4': 'disabled-color',
  'stroke-5': 'border-color',
  'stroke-6': 'border-color',
  'stroke-7': 'section-bg',
  'stroke-8': 'section-bg',
  'stroke-9': 'body-bg',
  'stroke-10': 'border-color',
  'stroke-11': 'body-bg',
  'primary-1': 'primary-active-bg',
  'primary-2': 'primary-active-bg',
  'primary-3': 'primary-active-bg',
  'primary-4': 'primary-bg',
  'primary-5': 'primary-hover-bg',
  'primary-6': 'primary-hover-bg',
  'primary-7': 'primary-hover-bg',
  'primary-8': 'default-hover-bg',
  'success-1': 'success-color',
  'success-2': 'success-color',
  'success-3': 'success-bg',
  'success-4': 'success-color',
  'success-5': 'success-bg',
  'error-1': 'danger-color',
  'error-2': 'danger-color',
  'error-3': 'danger-bg',
  'error-4': 'danger-color',
  'error-5': 'danger-bg',
  'warn-1': 'warning-color',
  'warn-2': 'warning-color',
  'warn-3': 'warning-bg',
  'warn-4': 'warning-color',
  'warn-5': 'warning-bg',
);

@function get-color($cat, $i) {
  @return nth(map-get($theme-colors, $cat), $i);
}

@function to-rgb($color) {
  @return red($color), green($color), blue($color);
}

// Use this for color with opacity = 1
// This is for backword compatibily
@function get-css-var($cat, $i) {
  // sass-lint:disable-block space-around-operator
  @return --#{map-get($name-mapping, #{$cat}-#{$i})};
}

// Use this for rgba support in theme colors
@function get-rgb-css-var($cat, $i) {
  // sass-lint:disable-block space-around-operator
  @return --rgb-#{map-get($name-mapping, #{$cat}-#{$i})};
}

@function theme-rgb($cat, $i) {
  @return var(
    --theme-#{$cat}-#{$i},
    var(get-css-var($cat, $i), get-color($cat, $i))
  );
}

@function theme-rgba($cat, $i, $opacity) {
  $css-var: var(
    --theme-rgb-#{$cat}-#{$i},
    var(get-rgb-css-var($cat, $i), to-rgb(get-color($cat, $i)))
  );

  // `unquote` is a workaround for node-sass misinterprets rgba as builtin function
  // https://github.com/sass/node-sass/issues/2251
  // dart-sass doesn't seem to have this issue.
  @return unquote('rgba(#{$css-var}, #{$opacity})');
}

@mixin theme-color($prop, $cat, $i, $opacity: 1) {
  $color: get-color($cat, $i);
  // @debug $cat,$i, get-color($cat, $i);

  @if $opacity >= 1 {
    #{$prop}: $color;
    #{$prop}: theme-rgb($cat, $i);
  } @else {
    #{$prop}: rgba($color, $opacity);
    #{$prop}: theme-rgba($cat, $i, $opacity);
  }
}

@mixin theme-border-impl($prop, $width, $style, $cat, $i, $opacity) {
  $color: get-color($cat, $i);

  @if $opacity >= 1 {
    #{$prop}: $width $style $color;
    #{$prop}: $width $style theme-rgb($cat, $i);
  } @else {
    #{$prop}: $width $style rgba($color, $opacity);
    #{$prop}: $width $style theme-rgba($cat, $i, $opacity);
  }
}

@mixin theme-border($width, $style, $cat, $i, $opacity: 1) {
  @include theme-border-impl(border, $width, $style, $cat, $i, $opacity);
}

@mixin theme-border-top($width, $style, $cat, $i, $opacity: 1) {
  @include theme-border-impl(border-top, $width, $style, $cat, $i, $opacity);
}

@mixin theme-border-right($width, $style, $cat, $i, $opacity: 1) {
  @include theme-border-impl(border-right, $width, $style, $cat, $i, $opacity);
}

@mixin theme-border-bottom($width, $style, $cat, $i, $opacity: 1) {
  @include theme-border-impl(border-bottom, $width, $style, $cat, $i, $opacity);
}

@mixin theme-border-left($width, $style, $cat, $i, $opacity: 1) {
  @include theme-border-impl(border-left, $width, $style, $cat, $i, $opacity);
}

// @mixin default-theme-variables {
//   @each $cat, $list in $theme-colors {
//     @for $i from 1 through length($list) {
//       #{--theme-#{$cat}-#{$i}}: nth($list, $i);
//     }
//   }
// }
